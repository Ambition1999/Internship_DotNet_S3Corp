@model Model.DTO.DtoRegisterAccount

@{
    ViewBag.Title = "Register";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/Content/CSSFile/Now_LoginPageCSS.css">
<link rel="stylesheet" href="~/Content/CSSFile/Now_SignUpPageCSS.css">

<div class="title">
    <h2><span>Tạo tài khoản mới</span></h2>
</div>
<div class="login-form" >
    @using (Html.BeginForm("RegisterAccount", "User", FormMethod.Post, new { id = "form-1"}))
    {
        <div class="form-container">
            <div class="field-group">
                <div class="input-group">
                    <span class="name">Tên người dùng:</span>
                    @Html.TextBoxFor(model => model.Name, new { id = "name", name = "name", placeHolder = "Name", @class = " input" })
                    <span class="form-message"></span>
                </div>
            </div>
            <div class="field-group">
                <div class="input-group">
                    <span class="username">Tên đăng nhập:</span>
                    @Html.TextBoxFor(model => model.Username, new { id = "username", name = "username", placeHolder = "Username", @class = " input" })
                    <span class="form-message" id="form-mesage-username"></span>
                </div>
            </div>
            <div class="field-group">
                <div class="input-group">
                    <span class="password">Mật khẩu:</span>
                    @Html.PasswordFor(model => model.Password, new { id = "password", name = "password", placeHolder = "Password", @class = " input" })
                    <span class="form-message"></span>
                </div>
            </div>
            <div class="field-group">
                    <div class="input-group">
                        <span class="confirm-password">Mật khẩu nhập lại:</span>
                        @Html.PasswordFor(model => model.Password, new { id = "confirm-password", name = "confirm-password", placeHolder = "Confirm Password", @class = " input" })
                        <span class="form-message"></span>
                    </div>
                </div>
            <div class="field-group">
                <div class="input-group">
                    <span class="gender">Giới tính:</span>
                    <div class="gender-radio">
                        <div class="gender-box">
                            @Html.RadioButtonFor(model => model.Gender, "Male", new { @class = "input", Checked = "checked"}) Nam
                        </div>
                        <div class="gender-box">
                            @Html.RadioButtonFor(model => model.Gender, "Female", new { @class = "input" }) Nữ
                        </div>
                    </div>
                    <span class="form-message"></span>
                </div>
            </div>
            <div class="field-group">
                <div class="input-group">
                    <span class="Email">Địa chỉ Email:</span>
                    @Html.TextBoxFor(model => model.Email, new { id = "email", name = "email", placeHolder = "Email Address", @class = " input" })
                    <span class="form-message"></span>
                </div>
            </div>
            <div class="field-group">
                <div class="input-group">
                    <span class="phone-number">Số điện thoại:</span>
                    @Html.TextBoxFor(model => model.Phone, new { id = "phone", name = "phone",placeHolder = "Phone Number", @class = " input" })
                    <span class="form-message"></span>
                </div>
            </div>
            <button class="btn btn-submit form-submit" disabled = "true" id="btn-submit" type="submit">Tạo</button>
        </div>
    }
</div>
<script src="~/Content/JsFile/ValidateForm.js"></script>
<script>
    Validator({
        form: '#form-1',
        errorSelector: '.form-message',
        rules: [
            Validator.isRequired('#name',"Vui lòng nhập tên người dùng"),
            Validator.isRequired('#username',"Vui lòng nhập tên đăng nhập"),
            Validator.isRequired('#password', "Vui lòng nhập mật khẩu"),
            Validator.minLength('#password', 6, 10, "Mật khẩu phải chứa từ 6 đến 10 kí tự"),
            Validator.isRequired('#confirm-password',"Vui lòng nhập mật khẩu nhập lại"),
            Validator.isConfirmed('#confirm-password', function () {
                return document.querySelector('#form-1 #password').value;
            }, "Mật khẩu nhập lại không chính xác"),
            Validator.isRequired('#email',"Vui lòng nhập Email"),
            Validator.isEmail('#email'),
            Validator.isRequired('#phone', "Vui lòng nhập số điện thoại"),
            Validator.isPhoneNumber('#phone'),
        ],
    })
</script>
<script>
        $.msg = function (text, style) {
            style = style || 'notice';           

            $('<div>')
                .attr('class', style)
                .css({ "text-align": "center", "font-size": "17px", "color": "#ffff", "padding": "17px" })
                .html(text)
                .fadeIn('fast')
                .insertBefore($('.title'))
                .animate({ opacity: 1.0 }, 4000)
                .fadeOut('slow', function () {
                    $(this).remove();
                });
        };

        var message = '@TempData["RegisterMessage"]';
        var messageColor = '@TempData["RegisterMessageColor"]';
        if (message != null && message != "" && messageColor != null && messageColor != "") {
            $.msg(message, 'bg-' + messageColor)
        }
</script>

<script>
    $(function () {
        $('#username').on("blur", function () {

            var username = $('#username').val();
            if (username.trim()) {
                var obj = { username: username };
                //Call API Check account is Exist
                AjaxCall('https://localhost:44325/api/UserAccount/UserNameIsExist/' + username, null).done(function (response) {
                    if (response === true) {
                        $('#form-mesage-username').text("Tên đăng nhập đã được sử dụng, vui lòng chọn tên khác");
                        $('#form-mesage-username').parent(".input-group").addClass('invalid');
                    }
                    else {
                        $('#form-mesage-username').text("");
                        $('#form-mesage-username').parent(".input-group").removeClass("invalid")
                    }
                }).fail(function (error) {
                    alert(error.StatusText);
                });
            }
        });
    });

    function AjaxCall(url, data, type) {
        return $.ajax({
            url: url,
            type: type ? type : 'GET',
            data: data,
            contentType: 'application/json'
        });
    }
</script>